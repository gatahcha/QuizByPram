const e="React Fundamentals",t="Test your understanding of core React concepts and best practices",n=[{question:"What is the main purpose of React hooks?",options:["To style components","To add state and lifecycle features to functional components","To create class components","To handle HTTP requests"],correctAnswer:1,explanation:"React hooks were introduced to allow functional components to use state and other React features without writing a class. They provide a more direct API to the React concepts you already know, making it easier to reuse stateful logic between components."},{question:"Which hook is used to perform side effects in functional components?",options:["useState","useContext","useEffect","useReducer"],correctAnswer:2,explanation:"useEffect is the hook specifically designed for side effects like data fetching, subscriptions, or manually changing the DOM. useState manages state, useContext accesses context, and useReducer is an alternative to useState for complex state logic."},{question:"What does the virtual DOM in React help with?",options:["Styling components","Improving performance by minimizing actual DOM updates","Managing state","Handling user events"],correctAnswer:1,explanation:"The virtual DOM is a lightweight copy of the actual DOM. React uses it to compare changes and calculate the minimal set of changes needed to update the real DOM, which significantly improves performance since direct DOM manipulation is expensive."},{question:"What is prop drilling in React?",options:["A performance optimization technique","Passing props through multiple component levels","A way to create new components","A method for styling components"],correctAnswer:1,explanation:"Prop drilling refers to the process of passing props through multiple levels of components to reach a deeply nested component that needs the data. While functional, it can make code harder to maintain. Solutions include Context API or state management libraries."},{question:"When should you use useCallback hook?",options:["To store any value between renders","To memoize callback functions to prevent unnecessary re-renders","To manage component state","To fetch data from an API"],correctAnswer:1,explanation:"useCallback returns a memoized version of a callback function that only changes if one of its dependencies changes. This is useful when passing callbacks to optimized child components that rely on reference equality to prevent unnecessary renders."},{question:"What is the correct way to update state in React?",options:["Directly mutating the state variable","Using the setter function from useState","Assigning a new value with =","Using this.state = newValue"],correctAnswer:1,explanation:"In React, you must use the setter function provided by useState (e.g., setState) to update state. Never mutate state directly as React won't detect the change and won't re-render the component. React state updates should be treated as immutable."}],o={title:e,description:t,questions:n};export{o as default,t as description,n as questions,e as title};
